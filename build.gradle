plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id "xyz.jpenilla.run-velocity" version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.andrexserver'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")

    implementation 'org.spongepowered:configurate-core:4.2.0'
    implementation 'org.spongepowered:configurate-yaml:4.2.0'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2' // Jackson lib
}

def targetJavaVersion = 21
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

tasks {
    runVelocity {
        velocityVersion("3.4.0-SNAPSHOT")
    }
}

shadowJar {
    archiveClassifier.set('')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Optional: Explicitly exclude BuildConstants if necessary
    exclude 'org/andrexserver/pteroManager/BuildConstants.class'
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync(generateTemplates)
project.eclipse.synchronizationTasks(generateTemplates)

tasks.register("copyJar", Copy) {
    dependsOn(tasks.named("shadowJar")) // Safe way to depend on shadowJar

    from(tasks.named("shadowJar").flatMap { it.archiveFile }) // This is the proper way
    into("C:\\Users\\simon\\Desktop\\dev\\proxy\\plugins")
}

// Make sure copyJar runs after build
tasks.named("build") {
    finalizedBy(tasks.named("shadowJar"))
    finalizedBy(tasks.named("copyJar"))
}



tasks.jar {
    enabled = false // disable default jar creation
}
